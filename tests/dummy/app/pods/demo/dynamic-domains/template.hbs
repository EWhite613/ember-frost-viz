<div class="line left">

  <h1>Dynamic Domains</h1>

  <p>
    This chart demonstrates the utility of dynamic domains in combination with dynamic data.
  </p>

  <p>
    The source data is updated in sliding window fashion, with the oldest element removed and a new element added on
    every update. Note that the x-scale automatically adjusts.
  </p>

  <p>
    The dependent variable changes randomly over time, so the chart could overrun any fixed domain for the dependent axis.
    Instead, the dynamic domain for y means that the scale is recomputed each time, such that the minimum and maximum
    accommodate all values.
  </p>

  <h2>TODO</h2>
  <p>
    Tweakable dynamic domains. domain=(function over elements) is implemented but not tested or documented. Maybe
    explicit domain='auto', or keywords to select certain behaviors like pad range, or limit scaling.
  </p>

  <div class="element-count">
    Plotting {{model.length}} elements
  </div>

  <!-- BEGIN-SNIPPET demo-dynamic-domain -->

  <!-- Chart element. -->
  {{#frost-viz/chart model
    as |chart|}}

    {{#frost-viz/scope chart
      (hash dimensions=(hash y=(frost-viz/dimension/linear chart)))
      as |scope|}}

      <!-- Chart has a cartesian transform. (x right, y up).
      The transform translates data attributes to coordinates via the dimensions. Any dimensions that would be overwritten
      (in this case, "x" and "y") are saved to an "overridden" attribute (e.g. if the source data had "x" or "y"
      attributes). -->
      {{#frost-viz/transform/cartesian scope
        dataBindings=(hash
          x=(frost-viz/binding (frost-viz/dimension/time scope) '0.time')
          y=(array
            (frost-viz/binding scope.dimensions.y '0.value')
            (frost-viz/binding scope.dimensions.y '1.value')
          )
        )
        as |transform dataBindings|
      }}

        <!-- Add scale components. These report their styled area (defined here in CSS)
        and the rest of the chart responsively resizes to their dimensions. -->
        {{frost-viz/scale transform dataBindings.y.[0] align="left" ticks=10 labelFormat=(frost-viz/format/numeric)}}
        {{frost-viz/scale transform dataBindings.y.[1] align="right" ticks=10 labelFormat=(frost-viz/format/numeric)}}
        {{frost-viz/scale transform dataBindings.x align="bottom" ticks=10 labelFormat=(frost-viz/format/time '%H:%M')}}

        <!-- Line plot component. Similar to a scatter plot, but yields y(x) and y(x+1) together. -->
        {{#frost-viz/plot/line transform
          dataBindings=(hash y=dataBindings.y.[0])
          as |begin end data|
        }}
          {{#frost-viz/plot/element/line-segment begin end
            as |begin end|
          }}
            {{frost-viz/plot/element/symbol/circle end
              cx=     end.x
              cy=     end.y
              r=      2
              fill=   'green'
            }}
          {{/frost-viz/plot/element/line-segment}}
        {{/frost-viz/plot/line}}

        {{#frost-viz/plot/line transform
          dataBindings=(hash y=dataBindings.y.[1])
          as |begin end data|
        }}
          {{#frost-viz/plot/element/line-segment begin end
            as |begin end|
          }}
            {{frost-viz/plot/element/symbol/circle end
              cx=     end.x
              cy=     end.y
              r=      2
              fill=   'red'
            }}
          {{/frost-viz/plot/element/line-segment}}
        {{/frost-viz/plot/line}}

      {{/frost-viz/transform/cartesian}}

    {{/frost-viz/scope}}

  {{/frost-viz/chart}}
  <!-- END-SNIPPET -->

  <div class="source">
    {{code-snippet name="demo-dynamic-domain.hbs"}}
  </div>

</div>
